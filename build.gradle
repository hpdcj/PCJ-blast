apply plugin: 'java'
apply from: 'jaxb.gradle'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//compileJava.options.compilerArgs.add '-Xlint:unchecked'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'pl.edu.icm.pcj:pcj:5.3.0'
    annotationProcessor 'pl.edu.icm.pcj:pcj:5.3.0'

    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"

    compileOnly(group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.3.0') {
        transitive = false
    }
    compileOnly(group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '3.3.0') {
        transitive = false
    }
}

jaxb {
    inputs.file "src/main/resources/dtd/NCBI_BlastOutput.dtd"
    outputs.dir "${buildDir}/generated-src/"

    packageName = "ncbi.blast.result.generated"
}

compileJava {
    dependsOn jaxb
    source jaxb.outputs.files
}

sourceSets {
    main {
        java {
            srcDirs += [file("${buildDir}/generated-src/")]
        }
    }
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.pcj.blast.Main'
}

tasks.withType(Jar) {
    destinationDir = file("${buildDir}/dist")
}

task copyToLib(type: Copy) {
    into file("${buildDir}/dist/libs")
    from configurations.runtimeClasspath
}

jar.dependsOn(copyToLib)

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Main-Class': project.ext.mainClass,
                'Class-Path': configurations.runtime.files.collect { "libs/$it.name" }.join(' ')
    }
}

task makeFatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Main-Class': project.ext.mainClass
    }
    baseName = project.name + '-fatjar'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
